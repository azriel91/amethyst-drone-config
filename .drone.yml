---
kind: pipeline
name: linux

steps:
  - name: build
    image: rust:1.36
    commands:
      - apt-get update
      - >
        apt-get install -y gcc pkg-config openssl libasound2-dev cmake
        build-essential libfreetype6-dev libexpat1-dev
        libxcb-composite0-dev libssl-dev
        libvulkan-dev libvulkan1 libxcb-dri3-0 libxcb-dri3-dev vulkan-utils mesa-vulkan-drivers
        xvfb libgl1-mesa-dev libgl1-mesa-glx mesa-utils
      - scripts/xvfb_start
      - cargo test
      - scripts/xvfb_stop

trigger:
  branch:
    exclude:
      - feature/*

---
kind: pipeline
name: windows

steps:

  # Build Arsenal runtime for Windows
  - name: build
    image: rust:1.36
    commands:
      - apt-get update
      - >
        apt-get install -y gcc gcc-mingw-w64 pkg-config openssl libasound2-dev
        cmake build-essential libfreetype6-dev libexpat1-dev
        libxcb-composite0-dev libssl-dev zip
        libvulkan-dev libvulkan1 libxcb-dri3-0 libxcb-dri3-dev vulkan-utils mesa-vulkan-drivers
        xvfb libgl1-mesa-dev libgl1-mesa-glx mesa-utils
      - rustup target install x86_64-pc-windows-gnu
      - mkdir -p .cargo
      - |
        echo '[target.x86_64-pc-windows-gnu]
        linker = "x86_64-w64-mingw32-gcc"' >> .cargo/config
      - scripts/xvfb_start
      - cargo test --target x86_64-pc-windows-gnu
      - scripts/xvfb_stop

trigger:
  branch:
    exclude:
      - feature/*

---
kind: pipeline
name: macos

steps:

  - name: build
    image: rust:1.36
    commands:
      # Install Cross-compiler toolchain
      - apt-get update
      - >
        apt-get install -y clang cmake cpio make libssl-dev lzma-dev libxml2-dev
        libvulkan-dev libvulkan1 libxcb-dri3-0 libxcb-dri3-dev vulkan-utils mesa-vulkan-drivers
        xvfb libgl1-mesa-dev libgl1-mesa-glx mesa-utils
      - rustup target add x86_64-apple-darwin
      - mkdir -p /build
      - cd /build
      - git clone --depth 1 https://github.com/tpoechtrager/osxcross.git
      - cd /build/osxcross/tarballs
      - wget https://s3.dockerproject.org/darwin/v2/MacOSX10.11.sdk.tar.xz
      - cd /build/osxcross
      - UNATTENDED=yes OSX_VERSION_MIN=10.7 ./build.sh
      - export PATH="$PATH:/build/osxcross/target/bin"
      - ln -s /build/osxcross/target/SDK/MacOSX10.11.sdk/System/ /System
      # Configure build to use Mac linker and libraries
      - mkdir -p /drone/src/.cargo
      - |
        echo '[target.x86_64-apple-darwin]
        linker = "x86_64-apple-darwin15-clang"' >> /drone/src/.cargo/config
      - cd /drone/src
      - echo "[replace]" >> Cargo.toml # Patch coreaudio-sys so that it can be cross-compiled on Linux
      - >
        echo '"coreaudio-sys:0.2.2" = 
        { git = "https://github.com/zicklag/coreaudio-sys.git",
        branch = "feature/support-linux-cross-compiling" }' >> Cargo.toml
      - export COREAUDIO_FRAMEWORKS_PATH='/System/Library/Frameworks'
      - >
        export COREAUDIO_CFLAGS='-I/System/Library/Frameworks/Kernel.framework/Headers
        -I/build/osxcross/target/SDK/MacOSX10.11.sdk/usr/include'
      - export CC=x86_64-apple-darwin15-clang
      - scripts/xvfb_start
      - cargo test --target x86_64-apple-darwin
      - scripts/xvfb_stop

trigger:
  branch:
    exclude:
      - feature/*
